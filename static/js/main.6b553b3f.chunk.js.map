{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","react_default","a","createElement","className","key","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","id","showPersons","deletePersonHandler","personIndex","Object","toConsumableArray","_this","splice","setState","nameChangedHandler","event","findIndex","p","objectSpread","target","togglePersonHandler","doesShow","_this2","this","style","backgroundColor","font","border","padding","boxShadow","cursor","borderRadius","map","index","Person_Person","fontWeight","classes","description","length","push","join","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b553b3f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Person.css\";\n\nconst person = props => {\n  return (\n    <div className=\"Person\" key={props.key}>\n      <p onClick={props.click}>\n        I'm {props.name} and I am {props.age} years old.\n      </p>\n      <p>{props.children}</p>\n      <input type=\"text\" onChange={props.changed} value={props.name} />\n    </div>\n  );\n};\n\nexport default person;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Person from \"./Person/Person\";\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: \"kljsdf\", name: \"Deb\", age: 27 },\n      { id: \"yernfj\", name: \"Tim\", age: 28 },\n      { id: \"mvkshd\", name: \"Claire\", age: 61 }\n    ],\n    showPersons: false\n  };\n\n  deletePersonHandler = personIndex => {\n    // const persons = this.state.persons.slice();\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({ persons: persons });\n  };\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState({ persons: persons });\n  };\n\n  togglePersonHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow });\n  };\n\n  render() {\n    const style = {\n      backgroundColor: \"#73eaba\",\n      font: \"inherit\",\n      border: \"1px solid black\",\n      padding: \"8px\",\n      boxShadow: \"0 2px 3px #ccc\",\n      cursor: \"pointer\",\n      borderRadius: \"10px\"\n    };\n\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = (\n        <div>\n          {this.state.persons.map((person, index) => {\n            return (\n              <Person\n                name={person.name}\n                key={person.id}\n                age={person.age}\n                click={() => this.deletePersonHandler(index)}\n                changed={event => this.nameChangedHandler(event, person.id)}\n              />\n            );\n          })}\n        </div>\n      );\n      style.backgroundColor = \"#ffc5da\";\n      style[\":hover\"] = {\n        backgroundColor: \"#ff6099\",\n        fontWeight: \"bold\"\n      };\n    }\n\n    const classes = [];\n\n    let description = \"There's lots of people here.\";\n\n    if (this.state.persons.length <= 2) {\n      classes.push(\"red\");\n      description = \"There's not many people left...\";\n    }\n\n    if (this.state.persons.length <= 1) {\n      classes.push(\"bold\");\n      description = \"There's only one person left!\";\n    }\n\n    if (this.state.persons.length <= 0) {\n      classes.push(\"darkred\");\n      description = \"THERE'S NO ONE LEFT!\";\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Hi, I'm Deb's React App</h1>\n        <p className={classes.join(\" \")}>{description}</p>\n        <button style={style} onClick={this.togglePersonHandler}>\n          Show/Hide Names\n        </button>\n        {persons}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}